/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from "@alephium/cli";
import { NetworkId } from "@alephium/web3";
import {
  Walph,
  WalphInstance,
  Walph50HodlAlf,
  Walph50HodlAlfInstance,
  Walf,
  WalfInstance,
  WalphTimed,
  WalphTimedInstance,
  Wayin,
  WayinInstance,
  WalphTimedToken,
  WalphTimedTokenInstance,
} from ".";
import { default as mainnetDeployments } from "../.deployments.mainnet.json";
import { default as testnetDeployments } from "../.deployments.testnet.json";
import { default as devnetDeployments } from "../.deployments.devnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    WalphTimed: DeployContractExecutionResult<WalphTimedInstance>;
    Walph?: DeployContractExecutionResult<WalphInstance>;
    Walph50HodlAlf?: DeployContractExecutionResult<Walph50HodlAlfInstance>;
    Walf?: DeployContractExecutionResult<WalfInstance>;
    Wayin?: DeployContractExecutionResult<WayinInstance>;
    WalphTimed_BlitzOneDay?: DeployContractExecutionResult<WalphTimedInstance>;
    WalphTimed_BlitzThreeDays?: DeployContractExecutionResult<WalphTimedInstance>;
    WalphTimedToken_BlitzThreeDaysAlf?: DeployContractExecutionResult<WalphTimedTokenInstance>;
    WalphTimedToken_BlitzThreeDaysAyin?: DeployContractExecutionResult<WalphTimedTokenInstance>;
  };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    WalphTimed: {
      ...json.contracts["WalphTimed"],
      contractInstance: WalphTimed.at(
        json.contracts["WalphTimed"].contractInstance.address
      ),
    },
    Walph:
      json.contracts["Walph"] === undefined
        ? undefined
        : {
            ...json.contracts["Walph"],
            contractInstance: Walph.at(
              json.contracts["Walph"].contractInstance.address
            ),
          },
    Walph50HodlAlf:
      json.contracts["Walph50HodlAlf"] === undefined
        ? undefined
        : {
            ...json.contracts["Walph50HodlAlf"],
            contractInstance: Walph50HodlAlf.at(
              json.contracts["Walph50HodlAlf"].contractInstance.address
            ),
          },
    Walf:
      json.contracts["Walf"] === undefined
        ? undefined
        : {
            ...json.contracts["Walf"],
            contractInstance: Walf.at(
              json.contracts["Walf"].contractInstance.address
            ),
          },
    Wayin:
      json.contracts["Wayin"] === undefined
        ? undefined
        : {
            ...json.contracts["Wayin"],
            contractInstance: Wayin.at(
              json.contracts["Wayin"].contractInstance.address
            ),
          },
    WalphTimed_BlitzOneDay:
      json.contracts["WalphTimed:BlitzOneDay"] === undefined
        ? undefined
        : {
            ...json.contracts["WalphTimed:BlitzOneDay"],
            contractInstance: WalphTimed.at(
              json.contracts["WalphTimed:BlitzOneDay"].contractInstance.address
            ),
          },
    WalphTimed_BlitzThreeDays:
      json.contracts["WalphTimed:BlitzThreeDays"] === undefined
        ? undefined
        : {
            ...json.contracts["WalphTimed:BlitzThreeDays"],
            contractInstance: WalphTimed.at(
              json.contracts["WalphTimed:BlitzThreeDays"].contractInstance
                .address
            ),
          },
    WalphTimedToken_BlitzThreeDaysAlf:
      json.contracts["WalphTimedToken:BlitzThreeDaysAlf"] === undefined
        ? undefined
        : {
            ...json.contracts["WalphTimedToken:BlitzThreeDaysAlf"],
            contractInstance: WalphTimedToken.at(
              json.contracts["WalphTimedToken:BlitzThreeDaysAlf"]
                .contractInstance.address
            ),
          },
    WalphTimedToken_BlitzThreeDaysAyin:
      json.contracts["WalphTimedToken:BlitzThreeDaysAyin"] === undefined
        ? undefined
        : {
            ...json.contracts["WalphTimedToken:BlitzThreeDaysAyin"],
            contractInstance: WalphTimedToken.at(
              json.contracts["WalphTimedToken:BlitzThreeDaysAyin"]
                .contractInstance.address
            ),
          },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments =
    networkId === "mainnet"
      ? mainnetDeployments
      : networkId === "testnet"
      ? testnetDeployments
      : networkId === "devnet"
      ? devnetDeployments
      : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
