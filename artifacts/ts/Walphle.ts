/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as WalphleContractJson } from "../Walphle.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace WalphleTypes {
  export type Fields = {
    poolSize: bigint;
    poolOwner: Address;
    poolFees: bigint;
    ratioAlphAlf: bigint;
    open: boolean;
    balance: bigint;
    numAttendees: bigint;
    attendees: [
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address,
      Address
    ];
    lastWinner: Address;
  };

  export type State = ContractState<Fields>;

  export type TicketBoughtEvent = ContractEvent<{
    from: Address;
    amount: bigint;
  }>;
  export type PoolOpenEvent = Omit<ContractEvent, "fields">;
  export type PoolCloseEvent = Omit<ContractEvent, "fields">;
  export type DestroyEvent = ContractEvent<{ from: Address }>;

  export interface CallMethodTable {
    getPoolState: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<boolean>;
    };
    getPoolSize: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getBalance: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<WalphleInstance, WalphleTypes.Fields> {
  eventIndex = { TicketBought: 0, PoolOpen: 1, PoolClose: 2, Destroy: 3 };
  consts = {
    ErrorCodes: {
      PoolFull: BigInt(0),
      PoolAlreadyClose: BigInt(1),
      PoolAlreadyOpen: BigInt(2),
      PoolClosed: BigInt(3),
      InvalidCaller: BigInt(4),
      NotEnoughALF: BigInt(5),
      PoolNotFull: BigInt(6),
      InvalidAmount: BigInt(7),
    },
  };

  at(address: string): WalphleInstance {
    return new WalphleInstance(address);
  }

  tests = {
    getPoolState: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<boolean>> => {
      return testMethod(this, "getPoolState", params);
    },
    getPoolSize: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getPoolSize", params);
    },
    getBalance: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getBalance", params);
    },
    getNumALF: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "getNumALF", params);
    },
    ratioAlphAlfRatio: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<bigint>> => {
      return testMethod(this, "ratioAlphAlfRatio", params);
    },
    buyTicket: async (
      params: TestContractParams<WalphleTypes.Fields, { amount: bigint }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "buyTicket", params);
    },
    distributePrize: async (
      params: TestContractParams<WalphleTypes.Fields, { winner: Address }>
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "distributePrize", params);
    },
    closePoolWhenFull: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "closePoolWhenFull", params);
    },
    closePool: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "closePool", params);
    },
    openPool: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "openPool", params);
    },
    destroyPool: async (
      params: Omit<TestContractParams<WalphleTypes.Fields, never>, "testArgs">
    ): Promise<TestContractResult<null>> => {
      return testMethod(this, "destroyPool", params);
    },
  };
}

// Use this object to test and deploy the contract
export const Walphle = new Factory(
  Contract.fromJson(
    WalphleContractJson,
    "",
    "1f1c08fd69938eaa752ff523f6488bdbbfdf199a701815423355ca714baf06ae"
  )
);

// Use this class to interact with the blockchain
export class WalphleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<WalphleTypes.State> {
    return fetchContractState(Walphle, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeTicketBoughtEvent(
    options: EventSubscribeOptions<WalphleTypes.TicketBoughtEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Walphle.contract,
      this,
      options,
      "TicketBought",
      fromCount
    );
  }

  subscribePoolOpenEvent(
    options: EventSubscribeOptions<WalphleTypes.PoolOpenEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Walphle.contract,
      this,
      options,
      "PoolOpen",
      fromCount
    );
  }

  subscribePoolCloseEvent(
    options: EventSubscribeOptions<WalphleTypes.PoolCloseEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Walphle.contract,
      this,
      options,
      "PoolClose",
      fromCount
    );
  }

  subscribeDestroyEvent(
    options: EventSubscribeOptions<WalphleTypes.DestroyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Walphle.contract,
      this,
      options,
      "Destroy",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | WalphleTypes.TicketBoughtEvent
      | WalphleTypes.PoolOpenEvent
      | WalphleTypes.PoolCloseEvent
      | WalphleTypes.DestroyEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Walphle.contract, this, options, fromCount);
  }

  methods = {
    getPoolState: async (
      params?: WalphleTypes.CallMethodParams<"getPoolState">
    ): Promise<WalphleTypes.CallMethodResult<"getPoolState">> => {
      return callMethod(
        Walphle,
        this,
        "getPoolState",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPoolSize: async (
      params?: WalphleTypes.CallMethodParams<"getPoolSize">
    ): Promise<WalphleTypes.CallMethodResult<"getPoolSize">> => {
      return callMethod(
        Walphle,
        this,
        "getPoolSize",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBalance: async (
      params?: WalphleTypes.CallMethodParams<"getBalance">
    ): Promise<WalphleTypes.CallMethodResult<"getBalance">> => {
      return callMethod(
        Walphle,
        this,
        "getBalance",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  async multicall<Calls extends WalphleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<WalphleTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Walphle,
      this,
      calls,
      getContractByCodeHash
    )) as WalphleTypes.MultiCallResults<Calls>;
  }
}
